would like to automate:
  (note: broken-link-checker v0.7.0 is broken on 6.1.0, runs properly on node 4.x)
  npm run check-internal-links - runs very fast
  npm run check-external-links
    403 (quora) - often indicates false-positive, server doesn't like a robot doing a HEAD request
    405 (amazon) - often indicates false-positive, server doesn't support HEAD

  deep links need an extra bit of effort - can extract from a verbose broken-link-checker run; there are only ~20 or so as of 5/18/2016

html
  overall page is structured properly
  CSS loads in develop and production
  Javascript loadss in develop, but only in production of config.noProductionJavascript is not set

gatsby
  linked fork generates ids for each header, allowing for deep-linking into articles

meta tags
  Meta tags for articles are well-formed
  Meta tags for front page and other non-articles are well-formed
  Test with structured data validators:
    https://developers.facebook.com/tools/debug/
    https://cards-dev.twitter.com/validator
    https://search.google.com/structured-data/testing-tool/u/0/

tracking
  validate that each pageview is reported
  validate that time on page is reported
  with javascript off, validate that each pageview is reported

with SPA enabled (or develop mode)
  (wrappers/md)
    validate proper scrolling to hash links - be sure to check back/forward, scroll positions, etc. Messy.
  (html)
    validate that each pageview is reported
  (_template)
    validate that local links in blog post contents (HTMLPreview/md) or author section (Author) stay within SPA via catch-links

rss/atom
  test using feedly.com (other RSS tools?)
  validator: https://validator.w3.org/feed/
  Filed bug for key validation failure on RSS: https://github.com/jpmonette/feed/issues/41

scripts:
  npm run clean-post - cleans the one latest post, or N most recent
  npm run make-post - creates one new file, updates previous' next key
  npm run generate-json - creates recent.json and all.json files in public
  npm run generate-rss - creates rss.xml and atom.xml in public
  npm run generate-tags - creates files at pages/tags/* based on all tags included in post frontmatter
  npm run update-rankings - gets piwik data, then adds or updates rank frontmatter property

